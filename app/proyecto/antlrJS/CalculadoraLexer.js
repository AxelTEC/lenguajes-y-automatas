// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,17,124,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
9,1,9,1,9,1,10,1,10,1,10,1,11,3,11,68,8,11,1,11,4,11,71,8,11,11,11,12,11,
72,1,11,1,11,4,11,77,8,11,11,11,12,11,78,3,11,81,8,11,1,12,4,12,84,8,12,
11,12,12,12,85,1,13,3,13,89,8,13,1,13,1,13,1,14,4,14,94,8,14,11,14,12,14,
95,1,14,1,14,1,15,1,15,1,15,1,15,5,15,104,8,15,10,15,12,15,107,9,15,1,15,
1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,118,8,16,10,16,12,16,121,9,
16,1,16,1,16,1,105,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,4,1,0,48,57,4,0,48,57,65,90,95,
95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,132,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,44,1,0,0,0,5,46,
1,0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,52,1,0,0,0,13,54,1,0,0,0,15,56,1,0,
0,0,17,58,1,0,0,0,19,60,1,0,0,0,21,63,1,0,0,0,23,67,1,0,0,0,25,83,1,0,0,
0,27,88,1,0,0,0,29,93,1,0,0,0,31,99,1,0,0,0,33,113,1,0,0,0,35,36,5,105,0,
0,36,37,5,109,0,0,37,38,5,112,0,0,38,39,5,114,0,0,39,40,5,105,0,0,40,41,
5,109,0,0,41,42,5,105,0,0,42,43,5,114,0,0,43,2,1,0,0,0,44,45,5,40,0,0,45,
4,1,0,0,0,46,47,5,41,0,0,47,6,1,0,0,0,48,49,5,61,0,0,49,8,1,0,0,0,50,51,
5,69,0,0,51,10,1,0,0,0,52,53,5,42,0,0,53,12,1,0,0,0,54,55,5,47,0,0,55,14,
1,0,0,0,56,57,5,43,0,0,57,16,1,0,0,0,58,59,5,45,0,0,59,18,1,0,0,0,60,61,
5,42,0,0,61,62,5,42,0,0,62,20,1,0,0,0,63,64,5,46,0,0,64,65,5,46,0,0,65,22,
1,0,0,0,66,68,3,17,8,0,67,66,1,0,0,0,67,68,1,0,0,0,68,70,1,0,0,0,69,71,7,
0,0,0,70,69,1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,80,1,0,
0,0,74,76,5,46,0,0,75,77,7,0,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,
0,78,79,1,0,0,0,79,81,1,0,0,0,80,74,1,0,0,0,80,81,1,0,0,0,81,24,1,0,0,0,
82,84,7,1,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,
26,1,0,0,0,87,89,5,13,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,
5,10,0,0,91,28,1,0,0,0,92,94,7,2,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,
0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,6,14,0,0,98,30,1,0,0,0,99,100,5,
47,0,0,100,101,5,42,0,0,101,105,1,0,0,0,102,104,9,0,0,0,103,102,1,0,0,0,
104,107,1,0,0,0,105,106,1,0,0,0,105,103,1,0,0,0,106,108,1,0,0,0,107,105,
1,0,0,0,108,109,5,42,0,0,109,110,5,47,0,0,110,111,1,0,0,0,111,112,6,15,0,
0,112,32,1,0,0,0,113,114,5,47,0,0,114,115,5,47,0,0,115,119,1,0,0,0,116,118,
8,3,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,
120,122,1,0,0,0,121,119,1,0,0,0,122,123,6,16,0,0,123,34,1,0,0,0,10,0,67,
72,78,80,85,88,95,105,119,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CalculadoraLexer extends antlr4.Lexer {

    static grammarFileName = "Calculadora.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'imprimir'", "'('", "')'", "'='", "'E'", 
                         "'*'", "'/'", "'+'", "'-'", "'**'", "'..'" ];
	static symbolicNames = [ null, null, null, null, null, null, "MULT", "DIV", 
                          "ADD", "SUB", "POW", "SQRT", "NUM", "ID", "NEWLINE", 
                          "WS", "COMMENT", "LINE_COMMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "MULT", "DIV", 
                      "ADD", "SUB", "POW", "SQRT", "NUM", "ID", "NEWLINE", 
                      "WS", "COMMENT", "LINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

CalculadoraLexer.EOF = antlr4.Token.EOF;
CalculadoraLexer.T__0 = 1;
CalculadoraLexer.T__1 = 2;
CalculadoraLexer.T__2 = 3;
CalculadoraLexer.T__3 = 4;
CalculadoraLexer.T__4 = 5;
CalculadoraLexer.MULT = 6;
CalculadoraLexer.DIV = 7;
CalculadoraLexer.ADD = 8;
CalculadoraLexer.SUB = 9;
CalculadoraLexer.POW = 10;
CalculadoraLexer.SQRT = 11;
CalculadoraLexer.NUM = 12;
CalculadoraLexer.ID = 13;
CalculadoraLexer.NEWLINE = 14;
CalculadoraLexer.WS = 15;
CalculadoraLexer.COMMENT = 16;
CalculadoraLexer.LINE_COMMENT = 17;



