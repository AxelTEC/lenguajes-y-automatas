{
	"unidad": "Unidad 4",
	"title": "Análisis Léxico",
	"concepts": [
		{
			"name": "Analizador Léxico",
			"description": "Un analizador léxico o analizador lexicográfico (en inglés scanner o tokenizer) es la primera fase de un compilador, consistente en un programa que recibe como entrada el código fuente de otro programa (secuencia de caracteres) y produce una salida compuesta de tokens (componentes léxicos) o símbolos. Estos tokens sirven para una posterior etapa del proceso de traducción, siendo la entrada para el analizador sintáctico (en inglés parser). La especificación de un lenguaje de programación a menudo incluye un conjunto de reglas que definen el léxico. Estas reglas consisten comúnmente en expresiones regulares que indican el conjunto de posibles secuencias de caracteres que definen un token o lexema."
		},
		{
			"name": "Análisis",
			"description": "Esta etapa está basada usualmente en una máquina de estados finitos. Esta máquina contiene la información de las posibles secuencias de caracteres que puede conformar cualquier token que sea parte del lenguaje (las instancias individuales de estas secuencias de caracteres son denominados lexemas). Por ejemplo, un token de naturaleza entero puede contener cualquier secuencia de caracteres numéricos."
		},
		{
			"name": "Token",
			"description": "Un token léxico o simplemente token es una cadena con un significado asignado y, por lo tanto, identificado. Está estructurado como un par que consta de un «nombre de token» y un «valor de token» opcional. El nombre del token es una categoría de unidad léxica."
		},
		{
			"name": "Antlr4",
			"description": "ANTLR es un poderoso generador de analizadores que puede usar para leer, procesar, ejecutar o traducir texto estructurado o archivos binarios. Es ampliamente utilizado en la academia y la industria para construir todo tipo de lenguajes, herramientas y marcos. La búsqueda de Twitter usa ANTLR para el análisis de consultas, con más de 2 mil millones de consultas por día."
		}
	],
	"exercises": [
		{
			"name": "Hola Mundo",
			"description": "Genera un gramatica que lea el texto 'Hola Juan' con antlr4 y genera el árbol sintáctico",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/01-HolaMundo/hola.g4"
		},
		{
			"name": "Función",
			"description": "Genera un gramatica en antlr4 que lea una funcion del tipo 'void main () {}' y genera el árbol sintáctico",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/02-Funcion/LenguajeC.g4"
		},
		{
			"name": "Lista de asistencia",
			"description": "Crea una gramática  con antlr que permita saber dada una lista cuantas personas asistieron y cuantas faltaron.",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/03-Asistencias/Asistencias.g4",
			"test": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/03-Asistencias/test.txt"
		},
		{
			"name": "XML",
			"description": "Crea una gramática  con antlr que permita leer el lenguaje de etiquetas xml y genera el árbol sintáctico ",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/04-Tag/Xml_clase.g4",
			"test": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/04-Tag/prueba.txt"
		},
		{
			"name": "Array",
			"description": "Crea una gramática  con antlr4 que permita leer un arreglo dinamico, genera el  árbol sintáctico.",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/05-Array/Array.g4",
			"test": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/05-Array/prueba.txt"
		},
		{
			"name": "JSON",
			"description": "Crea una gramática  con antlr que permita leer y generar el  árbol sintáctico de un archivo JSON."
		},
		{
			"name": "IP",
			"description": "Crea una gramática  con antlr que permita imprimir todas las IP's encontradas dado un archivo de prueba.",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/07-Ip/IPaddress.g4",
			"test": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/07-Ip/testFile.dat"
		},
		{
			"name": "Binario",
			"description": "Crea una gramática  con antlr que permita converir números binarios a números decimales.",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/08-Binario/Binario.g4",
			"test": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/08-Binario/test.txt",
			"code": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/08-Binario/Convertidor.java"
		},
		{
			"name": "Tarjeta de credito",
			"description": "Crea una gramática  con antlr que permita imprimir las tarjetas de credito, validars e indicar el tipo de tarjeta",
			"grammar": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/09-CreditCard/CreditCardGrammar.g4",
			"test": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/09-CreditCard/InputFile.dat",
			"code": "https://github.com/AxelTEC/lenguajes-y-automatas-ejercicios/blob/main/antlr-java/09-CreditCard/CreditCard.java"
		}
	]
}
